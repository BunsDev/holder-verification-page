{"version":3,"sources":["pages/Metamask.js","pages/TrustWalletConnect.js","components/TopTabs.js","App.js","serviceWorker.js","index.js"],"names":["Metamask","state","address","signMessage","signature","ecRecoverAddress","tokenBalance","buttonClicked","signAndConfirm","a","async","setState","web3","Web3","givenProvider","eth","getAccounts","personal","sign","ecRecover","tokenBalanceEndpoint","axios","get","tokenBalanceResponse","data","balance","statusMessage","this","color","className","onClick","far","icon","Component","bridge","TopTabs","items","default","togglePills","type","tab","e","preventDefault","md","link","to","active","activeItem","tabId","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sbAiIeA,E,2MA9GbC,MAAQ,CACNC,QAAS,GACTC,YAAa,oBACbC,UAAW,GACXC,iBAAkB,GAClBC,cAAe,EACfC,eAAe,G,EAGjBC,eAAiB,oCAAAC,EAAAC,OAAA,uDACf,EAAKC,SAAS,CAAEJ,eAAe,IACzBK,EAAO,IAAIC,IAAKA,IAAKC,eAFZ,WAAAL,EAAA,MAGOG,EAAKG,IAAIC,eAHhB,cAGTd,EAHS,kBAAAO,EAAA,MAKSG,EAAKG,IAAIE,SAASC,KACxC,EAAKjB,MAAME,YACXD,EAAQ,KAPK,cAKTE,EALS,mBAAAK,EAAA,MAWgBG,EAAKG,IAAIE,SAASE,UAC/C,EAAKlB,MAAME,YACXC,IAba,eAWTC,EAXS,OAoBTe,EACJ,iFACAlB,EAtBa,YAAAO,EAAA,MAwBoBY,IAAMC,IAAIF,IAxB9B,QAwBTG,EAxBS,OA0Bf,EAAKZ,SAAS,CAAET,QAASA,EAAQ,KACjC,EAAKS,SAAS,CAAEP,UAAWA,IAC3B,EAAKO,SAAS,CAAEN,iBAAkBA,IAClC,EAAKM,SAAS,CAAEL,aAAciB,EAAqBC,KAAKC,UA7BzC,uC,wEAiCf,IAAIC,EAAgB,GAiBpB,OAfgC,GAA5BC,KAAK1B,MAAMK,aACboB,EACE,kBAAC,IAAD,CAAUE,MAAM,WAAhB,kDAIOD,KAAK1B,MAAMK,cArDE,EAsDtBoB,EACE,kBAAC,IAAD,CAAUE,MAAM,WAAhB,8CAC8C,KAGvCD,KAAK1B,MAAMK,aA3DE,IA4DtBoB,EAAgB,kBAAC,IAAD,CAAUE,MAAM,UAAhB,wBAGhB,kBAAC,IAAD,CAAcC,UAAU,oBACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcA,UAAU,MAAxB,YACA,uBAAGA,UAAU,mCAAb,0CAIA,wBAAIA,UAAU,UACgB,IAA7BF,KAAK1B,MAAMM,cACV,yBAAKsB,UAAU,QACb,kBAAC,IAAD,wMAMA,kBAAC,IAAD,CACEC,QAASH,KAAKnB,eACdoB,MAAM,UACNC,UAAU,gBAHZ,UAKS,kBAAC,IAAD,CAASE,KAAG,EAACC,KAAK,UAI7B,yBAAKH,UAAU,QACb,6BACCH,EACD,6BACA,gDAAsBC,KAAK1B,MAAMC,SACjC,6CAAmByB,KAAK1B,MAAMG,WAC9B,iEACsC,IACnCuB,KAAK1B,MAAMI,kBAEd,6CAAmBsB,KAAK1B,MAAMK,wB,GAnG3B2B,a,mCCFjBC,EAAS,mCCsEAC,GD7DkBF,Y,2MCT/BhC,MAAQ,CACNmC,MAAO,CACLC,QAAS,M,EAIbC,YAAc,SAACC,EAAMC,GAAP,OAAe,SAAAC,GAE3B,GADAA,EAAEC,iBACE,EAAKzC,MAAMmC,MAAMG,KAAUC,EAAK,CAClC,IAAIJ,EAAK,eAAQ,EAAKnC,MAAMmC,OAC5BA,EAAMG,GAAQC,EACd,EAAK7B,SAAS,CACZyB,a,wEAMJ,OACE,kBAAC,IAAD,CAAcP,UAAU,QACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQc,GAAG,MACT,yDACA,kBAAC,IAAD,CAAQd,UAAU,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEe,MAAI,EACJC,GAAG,IACHC,OAAwC,MAAhCnB,KAAK1B,MAAMmC,MAAX,QACRN,QAASH,KAAKW,YAAY,UAAW,MAJvC,aASF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEM,MAAI,EACJC,GAAG,IACHC,OAAwC,MAAhCnB,KAAK1B,MAAMmC,MAAX,QACRN,QAASH,KAAKW,YAAY,UAAW,MAJvC,+BASF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEM,MAAI,EACJC,GAAG,IACHC,OAAwC,MAAhCnB,KAAK1B,MAAMmC,MAAX,QACRN,QAASH,KAAKW,YAAY,UAAW,MAJvC,WAUJ,kBAAC,IAAD,CAAeS,WAAYpB,KAAK1B,MAAMmC,MAAX,SACzB,kBAAC,IAAD,CAAYY,MAAM,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAYA,MAAM,MAClB,kBAAC,IAAD,CAAYA,MAAM,KAChB,6C,GA9DMf,c,OCMPgB,MAhBf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,KAAK,KACV,kBAAC,EAAD,YCAMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad74198a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport axios from \"axios\";\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBIcon,\r\n  MDBCardBody,\r\n  MDBCardText,\r\n  MDBAlert,\r\n  MDBCardTitle\r\n} from \"mdbreact\";\r\n\r\nconst MIN_AMOUNT_OF_TOKEN = 1;\r\n\r\nclass Metamask extends Component {\r\n  state = {\r\n    address: \"\",\r\n    signMessage: \"Coin Amount Check\",\r\n    signature: \"\",\r\n    ecRecoverAddress: \"\",\r\n    tokenBalance: -1,\r\n    buttonClicked: false\r\n  };\r\n\r\n  signAndConfirm = async () => {\r\n    this.setState({ buttonClicked: true });\r\n    const web3 = new Web3(Web3.givenProvider);\r\n    const address = await web3.eth.getAccounts();\r\n\r\n    const signature = await web3.eth.personal.sign(\r\n      this.state.signMessage,\r\n      address[0]\r\n    );\r\n\r\n    // If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover (See example below)\r\n    const ecRecoverAddress = await web3.eth.personal.ecRecover(\r\n      this.state.signMessage,\r\n      signature\r\n    );\r\n\r\n    // check balance endpoint - https://api.tokenbalance.com/token/$CONTRACT/$ETH_ADDRESS\r\n    // bat - https://api.tokenbalance.com/token/0x0d8775f648430679a709e98d2b0cb6250d2887ef/$ETH_ADDRESS\r\n    // storm - https://api.tokenbalance.com/token/0xd0a4b8946cb52f0661273bfbc6fd0e0c75fc6433/$ETH_ADDRESS\r\n\r\n    const tokenBalanceEndpoint =\r\n      \"https://api.tokenbalance.com/token/0xd0a4b8946cb52f0661273bfbc6fd0e0c75fc6433/\" +\r\n      address;\r\n\r\n    const tokenBalanceResponse = await axios.get(tokenBalanceEndpoint);\r\n\r\n    this.setState({ address: address[0] });\r\n    this.setState({ signature: signature });\r\n    this.setState({ ecRecoverAddress: ecRecoverAddress });\r\n    this.setState({ tokenBalance: tokenBalanceResponse.data.balance });\r\n  };\r\n\r\n  render() {\r\n    let statusMessage = \"\";\r\n\r\n    if (this.state.tokenBalance == -1) {\r\n      statusMessage = (\r\n        <MDBAlert color=\"primary\">\r\n          Please check your wallet and sign the message!\r\n        </MDBAlert>\r\n      );\r\n    } else if (this.state.tokenBalance >= MIN_AMOUNT_OF_TOKEN) {\r\n      statusMessage = (\r\n        <MDBAlert color=\"success\">\r\n          Verified! You have enough tokens to qualify{\" \"}\r\n        </MDBAlert>\r\n      );\r\n    } else if (this.state.tokenBalance < MIN_AMOUNT_OF_TOKEN) {\r\n      statusMessage = <MDBAlert color=\"danger\">Not Enough Tokens! </MDBAlert>;\r\n    }\r\n    return (\r\n      <MDBContainer className=\"mt-5 text-center\">\r\n        <MDBRow>\r\n          <MDBCol>\r\n            <MDBJumbotron>\r\n              <MDBCardBody>\r\n                <MDBCardTitle className=\"h2\">Metamask</MDBCardTitle>\r\n                <p className=\"blue-text my-4 font-weight-bold\">\r\n                  Sign Transaction To Prove Token Amount\r\n                </p>\r\n\r\n                <hr className=\"my-4\" />\r\n                {this.state.buttonClicked === false ? (\r\n                  <div className=\"pt-2\">\r\n                    <MDBCardText>\r\n                      Simply sign a message verifying that you own your keys. A\r\n                      notification from your wallet will appear asking you to\r\n                      sign the message. NOTE: You need metamask or another web3\r\n                      wallet to use this.\r\n                    </MDBCardText>\r\n                    <MDBBtn\r\n                      onClick={this.signAndConfirm}\r\n                      color=\"primary\"\r\n                      className=\"waves-effect\"\r\n                    >\r\n                      Verify <MDBIcon far icon=\"gem\" />\r\n                    </MDBBtn>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"pt-2\">\r\n                    <hr />\r\n                    {statusMessage}\r\n                    <hr />\r\n                    <p>Metamask address: {this.state.address}</p>\r\n                    <p>Signed Result: {this.state.signature}</p>\r\n                    <p>\r\n                      Recover Address From Signed Result:{\" \"}\r\n                      {this.state.ecRecoverAddress}\r\n                    </p>\r\n                    <p>Token Balance: {this.state.tokenBalance}</p>\r\n                  </div>\r\n                )}\r\n              </MDBCardBody>\r\n            </MDBJumbotron>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Metamask;\r\n","import React, { Component } from \"react\";\r\nimport WalletConnect from \"@trustwallet/walletconnect\";\r\nimport WalletConnectQRCodeModal from \"@walletconnect/qrcode-modal\";\r\nimport {\r\n  MDBJumbotron,\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBIcon,\r\n  MDBCardBody,\r\n  MDBCardText,\r\n  MDBAlert,\r\n  MDBCardTitle\r\n} from \"mdbreact\";\r\n\r\nconst bridge = \"https://bridge.walletconnect.org\";\r\n\r\n// https://bridge.walletconnect.org\r\n\r\n// import {\r\n//   walletConnectInit,\r\n//   isWalletConnected\r\n// } from \"../helpers/WalletConnectHelper\";\r\n\r\nclass TrustWalletConnect extends Component {\r\n  state = { buttonClicked: false };\r\n\r\n  connectToWalletConnect = async () => {\r\n    this.setState({ buttonClicked: false });\r\n    const walletConnector = new WalletConnect({ bridge });\r\n    window.walletConnector = walletConnector;\r\n    await walletConnector.killSession();\r\n    await walletConnector.createSession();\r\n    const uri = walletConnector.uri;\r\n\r\n    console.log(uri);\r\n\r\n    // display QR Code modal\r\n    WalletConnectQRCodeModal.open(uri, () => {\r\n      console.log(\"QR Code Modal closed\");\r\n    });\r\n\r\n    // subscribe to events\r\n    this.subscribeToEvents(walletConnector, this.onConnected);\r\n  };\r\n\r\n  onConnected = params => {\r\n    console.log(\"ON CONNECTED!\");\r\n    console.log(params);\r\n  };\r\n\r\n  subscribeToEvents = (walletConnector, onConnectedCallback) => {\r\n    walletConnector.on(\"session_update\", async (error, payload) => {\r\n      console.log('walletConnector.on(\"session_update\")');\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // const { chainId, accounts } = payload.params[0];\r\n      // this.onSessionUpdate(accounts, chainId);\r\n    });\r\n\r\n    walletConnector.on(\"connect\", (error, payload) => {\r\n      console.log('walletConnector.on(\"connect\")'); // tslint:disable-line\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      walletConnector\r\n        .getAccounts()\r\n        .then(result => {\r\n          // Returns the accounts\r\n          console.log(result);\r\n          const account = result.find(account => account.network === 714);\r\n          console.log(\"ACCOUNT:\", account);\r\n          console.log(\"WALLET CONNECT ACCOUNTS RESULTS \" + account.address);\r\n          //   console.log(\"ADDR:\", crypto.decodeAddress(account.address));\r\n\r\n          onConnectedCallback(payload.params[0]);\r\n        })\r\n        .catch(error => {\r\n          // Error returned when rejected\r\n          console.error(error);\r\n        });\r\n\r\n      console.log(payload.params[0]);\r\n    });\r\n\r\n    walletConnector.on(\"disconnect\", (error, payload) => {\r\n      console.log('walletConnector.on(\"disconnect\")'); // tslint:disable-line\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      WalletConnectQRCodeModal.close();\r\n      // this.onDisconnect();\r\n    });\r\n\r\n    if (walletConnector.connected) {\r\n      const { chainId, accounts } = walletConnector;\r\n      const address = accounts[0];\r\n\r\n      // return walletConnect\r\n    }\r\n  };\r\n\r\n  componentDidMount() {}\r\n  render() {\r\n    return (\r\n      <MDBContainer className=\"mt-5 text-center\">\r\n        <MDBRow>\r\n          <MDBCol>\r\n            <MDBJumbotron>\r\n              <MDBCardBody>\r\n                <MDBCardTitle className=\"h2\">\r\n                  Trust Wallet WalletConnect\r\n                </MDBCardTitle>\r\n                <p className=\"blue-text my-4 font-weight-bold\">\r\n                  Scan qrcode code from Trust Wallet to prove token amount\r\n                </p>\r\n\r\n                <hr className=\"my-4\" />\r\n                {this.state.buttonClicked === false ? (\r\n                  <div className=\"pt-2\">\r\n                    <MDBCardText>\r\n                      Simply scan the qr code from the trust wallet on your\r\n                      phone. A connection will be established and you can verify\r\n                      if you have enough tokens.\r\n                    </MDBCardText>\r\n                    <MDBBtn\r\n                      onClick={this.connectToWalletConnect}\r\n                      color=\"primary\"\r\n                      className=\"waves-effect\"\r\n                    >\r\n                      Verify <MDBIcon far icon=\"gem\" />\r\n                    </MDBBtn>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"pt-2\">\r\n                    <hr />\r\n                    {/* {statusMessage} */}\r\n                    <hr />\r\n                    <p>Metamask address: {this.state.address}</p>\r\n                    <p>Signed Result: {this.state.signature}</p>\r\n                    <p>\r\n                      Recover Address From Signed Result:{\" \"}\r\n                      {this.state.ecRecoverAddress}\r\n                    </p>\r\n                    <p>Token Balance: {this.state.tokenBalance}</p>\r\n                  </div>\r\n                )}\r\n              </MDBCardBody>\r\n            </MDBJumbotron>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrustWalletConnect;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBTabPane,\r\n  MDBTabContent,\r\n  MDBNav,\r\n  MDBNavItem,\r\n  MDBNavLink\r\n} from \"mdbreact\";\r\n\r\nimport Metamask from \"../pages/Metamask\";\r\nimport TrustWalletConnect from \"../pages/TrustWalletConnect\";\r\n\r\nclass TopTabs extends Component {\r\n  state = {\r\n    items: {\r\n      default: \"1\"\r\n    }\r\n  };\r\n\r\n  togglePills = (type, tab) => e => {\r\n    e.preventDefault();\r\n    if (this.state.items[type] !== tab) {\r\n      let items = { ...this.state.items };\r\n      items[type] = tab;\r\n      this.setState({\r\n        items\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MDBContainer className=\"mt-4\">\r\n        <MDBRow>\r\n          <MDBCol md=\"12\">\r\n            <h2>Token Holder Verification</h2>\r\n            <MDBNav className=\"mt-5 nav-pills\">\r\n              <MDBNavItem>\r\n                <MDBNavLink\r\n                  link\r\n                  to=\"#\"\r\n                  active={this.state.items[\"default\"] === \"1\"}\r\n                  onClick={this.togglePills(\"default\", \"1\")}\r\n                >\r\n                  Metamask\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink\r\n                  link\r\n                  to=\"#\"\r\n                  active={this.state.items[\"default\"] === \"2\"}\r\n                  onClick={this.togglePills(\"default\", \"2\")}\r\n                >\r\n                  Trust Wallet WalletConnect\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink\r\n                  link\r\n                  to=\"#\"\r\n                  active={this.state.items[\"default\"] === \"3\"}\r\n                  onClick={this.togglePills(\"default\", \"3\")}\r\n                >\r\n                  Other\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n            </MDBNav>\r\n            <MDBTabContent activeItem={this.state.items[\"default\"]}>\r\n              <MDBTabPane tabId=\"1\">\r\n                <Metamask />\r\n              </MDBTabPane>\r\n              <MDBTabPane tabId=\"2\">{/* <TrustWalletConnect /> */}</MDBTabPane>\r\n              <MDBTabPane tabId=\"3\">\r\n                <p>Other</p>\r\n              </MDBTabPane>\r\n            </MDBTabContent>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\nexport default TopTabs;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TopTabs from \"./components/TopTabs\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Switch>\n            <Route path=\"/\">\n              <TopTabs />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}